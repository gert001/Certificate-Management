# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#trigger:
#- main

pool:
  vmImage: windows-latest

parameters:
  - name: Cert_DNS_Name
    default: 'Meeting-Cert4'
  - name: CA_DNS_Name
    default: 'mytestca.northeurope.cloudapp.azure.com'
  - name: Keyvault
    default: 'certsecretmanagement'

steps:



- task: AzurePowerShell@5
  inputs:
    azureSubscription: 'GSPipelines'
    ScriptType: 'InlineScript'
    Inline: |
      $CustomPolicy = New-AzKeyVaultCertificatePolicy -SubjectName "C=GB,ST=London,L=London,O=AXAXL,OU=Global Technology,CN=${{parameters.CA_DNS_Name}}" -ValidityInMonths 12  -IssuerName Unknown -EmailAtNumberOfDaysBeforeExpiry 30
      $customcert = Add-AzKeyVaultCertificate -VaultName ${{parameters.Keyvault}} -name ${{parameters.Cert_DNS_Name}} -CertificatePolicy $CustomPolicy
      write-host "save the CSR to be signed"
      $customcert.CertificateSigningRequest > certsignrequest.csr
      certreq.exe -submit -attrib "CertificateTemplate:SubCA" -config "http://mytestca.northeurope.cloudapp.azure.com\ca-sign-test" -q certsignrequest.csr signedrequest.cer

    azurePowerShellVersion: 'LatestVersion'
    workingDirectory: $(Build.ArtifactStagingDirectory)

# certreq.exe -submit -attrib "CertificateTemplate:SubCA" -config "https://btbjuqpcww3ehai1oozluine0g.fx.internal.cloudapp.net\allthecerts-CA-Sign-Test-CA" -q certsignrequest.csr signedrequest.cer
#      Invoke-AzVmRunCommand -ResourceGroupName "Cert-KeyManagement" -VMName "CA-Sign-Test" -CommandId "RunPowerShellScript" -ScriptPath "C:\Windows\System32\certreq.exe" -Parameter @{ -submit ; -attrib "CertificateTemplate:SubCA" ;  -config CA-Sign-Test\allthecerts-CA-Sign-Test-CA ; -q ; certsignrequest.csr ; signedrequest.cer }







#- task: AzurePowerShell@5
#  inputs:
#    azureSubscription: 'GSPipelines'
#    ScriptType: 'InlineScript'
#    Inline: |
#      $CustomPolicy = New-AzKeyVaultCertificatePolicy -SubjectName "C=GB,ST=London,L=London,O=AXAXL,OU=Global Technology,CN=${{parameters.DNS_Name}}" -ValidityInMonths 12  -IssuerName Unknown -EmailAtNumberOfDaysBeforeExpiry 30
#      $customcert = Add-AzKeyVaultCertificate -VaultName ${{parameters.Keyvault}} -name ${{parameters.DNS_Name}} -CertificatePolicy $CustomPolicy
# 
#      write-host "figure out sending the CSR to be signed"
#    azurePowerShellVersion: 'LatestVersion'


#- task: AzureCLI@2
#  inputs:
#    azureSubscription: 'GSPipelines'
#    scriptType: 'ps'
#    scriptLocation: 'inlineScript'
#    inlineScript: |
#     $defaultJsonPolicy = az keyvault certificate get-default-policy | convertfrom-json
#     $defaultJsonPolicy.x509CertificateProperties.subject = 'C=GB,ST=London,L=London,O=AXAXL,OU=Global Technology,CN=${{parameters.DNS_Name}}' 
#     $defaultJsonPolicy.lifetimeActions.action.actionType = "EmailContacts"
#     $defaultJsonPolicy.issuerParameters.name = "Unknown"
#     $defaultJsonPolicy.lifetimeActions.trigger.daysBeforeExpiry = 30
#     $defaultJsonPolicy.keyProperties.reuseKey = "False"
#     $defaultJsonPolicy.x509CertificateProperties.keyUsage = @()
#     $defaultJsonPolicy | convertto-json -depth 9| out-file -encoding utf8 customcertpolicy.json 
#     az keyvault certificate create --vault-name ${{parameters.Keyvault}} --name ${{parameters.DNS_Name}} --policy `@customcertpolicy.json




- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'Certificate' 
    publishLocation: 'Container'
    #targetPath: # Required when publishLocation == FilePath
   #parallel: false # Optional
    #parallelCount: # Optional
  displayName: 'Run a one-line script'


